# coding: utf-8

"""
    Ververica Platform API

    The Ververica Platform APIs, excluding Application Manager.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ververica_sdk.api_client import ApiClient


class ApiTokensApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_api_token_using_post(self, api_token, ns, **kwargs):  # noqa: E501
        """createApiToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_api_token_using_post(api_token, ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiToken api_token: apiToken (required)
        :param str ns: ns (required)
        :return: CreateApiTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_api_token_using_post_with_http_info(api_token, ns, **kwargs)  # noqa: E501
        else:
            (data) = self.create_api_token_using_post_with_http_info(api_token, ns, **kwargs)  # noqa: E501
            return data

    def create_api_token_using_post_with_http_info(self, api_token, ns, **kwargs):  # noqa: E501
        """createApiToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_api_token_using_post_with_http_info(api_token, ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiToken api_token: apiToken (required)
        :param str ns: ns (required)
        :return: CreateApiTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'ns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_api_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `create_api_token_using_post`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `create_api_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'api_token' in params:
            body_params = params['api_token']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apitokens/v1/namespaces/{ns}/apitokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateApiTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_api_token_using_delete(self, api_token_name, ns, **kwargs):  # noqa: E501
        """deleteApiToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_token_using_delete(api_token_name, ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token_name: apiTokenName (required)
        :param str ns: ns (required)
        :return: DeleteApiTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_api_token_using_delete_with_http_info(api_token_name, ns, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_api_token_using_delete_with_http_info(api_token_name, ns, **kwargs)  # noqa: E501
            return data

    def delete_api_token_using_delete_with_http_info(self, api_token_name, ns, **kwargs):  # noqa: E501
        """deleteApiToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_token_using_delete_with_http_info(api_token_name, ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token_name: apiTokenName (required)
        :param str ns: ns (required)
        :return: DeleteApiTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token_name', 'ns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api_token_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token_name' is set
        if ('api_token_name' not in params or
                params['api_token_name'] is None):
            raise ValueError("Missing the required parameter `api_token_name` when calling `delete_api_token_using_delete`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `delete_api_token_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_token_name' in params:
            path_params['apiTokenName'] = params['api_token_name']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apitokens/v1/namespaces/{ns}/apitokens/{apiTokenName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteApiTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_token_using_get(self, api_token_name, ns, **kwargs):  # noqa: E501
        """getApiToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_token_using_get(api_token_name, ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token_name: apiTokenName (required)
        :param str ns: ns (required)
        :return: GetApiTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_token_using_get_with_http_info(api_token_name, ns, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_token_using_get_with_http_info(api_token_name, ns, **kwargs)  # noqa: E501
            return data

    def get_api_token_using_get_with_http_info(self, api_token_name, ns, **kwargs):  # noqa: E501
        """getApiToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_token_using_get_with_http_info(api_token_name, ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token_name: apiTokenName (required)
        :param str ns: ns (required)
        :return: GetApiTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token_name', 'ns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_token_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token_name' is set
        if ('api_token_name' not in params or
                params['api_token_name'] is None):
            raise ValueError("Missing the required parameter `api_token_name` when calling `get_api_token_using_get`")  # noqa: E501
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `get_api_token_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_token_name' in params:
            path_params['apiTokenName'] = params['api_token_name']  # noqa: E501
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apitokens/v1/namespaces/{ns}/apitokens/{apiTokenName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetApiTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_api_tokens_using_get(self, ns, **kwargs):  # noqa: E501
        """listApiTokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_api_tokens_using_get(ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ns: ns (required)
        :return: ListApiTokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_api_tokens_using_get_with_http_info(ns, **kwargs)  # noqa: E501
        else:
            (data) = self.list_api_tokens_using_get_with_http_info(ns, **kwargs)  # noqa: E501
            return data

    def list_api_tokens_using_get_with_http_info(self, ns, **kwargs):  # noqa: E501
        """listApiTokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_api_tokens_using_get_with_http_info(ns, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ns: ns (required)
        :return: ListApiTokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_api_tokens_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ns' is set
        if ('ns' not in params or
                params['ns'] is None):
            raise ValueError("Missing the required parameter `ns` when calling `list_api_tokens_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ns' in params:
            path_params['ns'] = params['ns']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apitokens/v1/namespaces/{ns}/apitokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListApiTokensResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
